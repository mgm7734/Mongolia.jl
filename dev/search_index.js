var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Mongolia","category":"page"},{"location":"#[Mongolia](https://github.com/mgm7734/Mongolia.jl)","page":"Home","title":"Mongolia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for working with Mongodb data in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mongolia provides a Tables implementation for [Mongoc.Cursor].","category":"page"},{"location":"#Mongo-data-Mongolian-Tables","page":"Home","title":"Mongo data => Mongolian Tables","text":"","category":"section"},{"location":"#Mongolian-query-syntax","page":"Home","title":"Mongolian query syntax","text":"","category":"section"},{"location":"#Mongolian-Tables-Mongo-data","page":"Home","title":"Mongolian Tables => Mongo data","text":"","category":"section"},{"location":"#SSH-Tunnel","page":"Home","title":"SSH Tunnel","text":"","category":"section"},{"location":"#Misc.-Tips","page":"Home","title":"Misc. Tips","text":"","category":"section"},{"location":"#Memoize-Expensive-Queries","page":"Home","title":"Memoize Expensive Queries","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Mongolia]","category":"page"},{"location":"#Mongolia.NOISE_FIELDS","page":"Home","title":"Mongolia.NOISE_FIELDS","text":"Mongo field names to be moved to the right via select!.\n\n\n\n\n\n","category":"constant"},{"location":"#Mongolia.Database","page":"Home","title":"Mongolia.Database","text":"Wrap a Mongoc.Database and a Mongoc.Client.\n\nAllows collections to be accessed as properties.\n\n\n\n\n\n","category":"type"},{"location":"#Base.getproperty-Tuple{Mongolia.Database, Symbol}","page":"Home","title":"Base.getproperty","text":"Overload property access as shortcut for collections.\n\ndb.project == db[\"project\"]\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.bson-Tuple{}","page":"Home","title":"Mongolia.bson","text":"bson(pair...) => Mongoc.BSON\nbson(AbstractVector{pair}) => Vector{Mongoc.BSON}\n\nConstruct a BSON object using keyword arguments or pairs to reduce quote clutter.\n\nExamples\n\njulia> bson(:metadata!pt => r\"^mei.*1$\", :project => +:in => [\"proj1\", \"proj2\"])\nMongoc.BSON with 2 entries:\n  \"metadata.pt\" => Dict{Any, Any}(\"\\$regex\"=>\"^mei.*1\\$\")\n  \"project\"     => Dict{Any, Any}(\"\\$in\"=>Any[\"proj1\", \"proj2\"])\n\njulia> bson([\n         +:match => :type=>\"SUBMIT\", \n         +:group => (:_id=>+:pt, :N=>+:sum=>1)\n       ])\nMongoc.BSON with 2 entries:\n  \"0\" => Dict{Any, Any}(\"\\$match\"=>Dict{Any, Any}(\"type\"=>\"SUBMIT\"))\n  \"1\" => Dict{Any, Any}(\"\\$group\"=>Dict{Any, Any}(\"_id\"=>\"\\$pt\", \"N\"=>Dict{Any,…\njulia> bson(a=1, b=2)\nMongoc.BSON with 2 entries:\n  \"a\" => 1\n  \"b\" => 2\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.flatten_dicts-Tuple{Any}","page":"Home","title":"Mongolia.flatten_dicts","text":"flatten_dicts(cursor ; [separator = \"!\"])\n\nConvert an iterable of nested Dict{String,Any} (such as a Cursor returned by Mongoc.find) into a dictonary of equal length columns.\n\nThe returned dictionary can be converted to a DataFrame.\n\nEach field value that is a dictionary is replaced a field for every entry. The field names are the path.\n\nUsing \"!\" does not require quoting in Symbol names, so you can type :metadata!pt instead of \"metadata.pt\".\n\nOption Arguments\n\nseparator : path separator for flattened column names. \n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.lookup-Tuple{Any, Any}","page":"Home","title":"Mongolia.lookup","text":"Construct lookup and optional unwind stages for a pipeline.\n\nThe defaults work for a to-many relation where the child collection's foreign key is the parent collection name.  \n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.mfind-Tuple{Any, Vararg{Union{AbstractArray, Pair}}}","page":"Home","title":"Mongolia.mfind","text":"mfind(collection, queryitem...; limit=0, option...)\nmfind(database, project_code, dataset_code, queritem...; limit=0, option...)\n\nQuery mongodb with a powerful short-hand syntax and return a dataframe.\n\nEach queryitem can be a Pair or vector of pairs using bson syntax.\n\nThe vectors are flattened so you don't need ... after tomany[@ref].  \n\nIf any item looks like a pipeline stage (starts with '$(Expr(:incomplete, \"incomplete: invalid character literal\"))\n\nExamples\n\njulia> db = database(\"mmendel\",QA);\n\njulia> mfind(db.project, :code=>+:regex=>\"^test\"; :limit=>1, :skip=>1)\n1×12 DataFrame\n Row │ active  code    dateCreated              isDeleted  lastUpdated         ⋯\n     │ Bool    String  DateTime                 Bool       DateTime            ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │   true  test2   2015-01-12T17:28:50.481      false  2015-01-12T17:28:50 ⋯\n                                                               8 columns omitted\njulia> configs = mfind(db.project, \n         :code=>+:regex=>\"^test\",\n         tomany(\"project\", \"instrument\", \"instrumentConfig\"; skipmissing=true)\n         ; limit=3);\n\njulia> configs[!, [:name, :instrumentConfig!name]]\n3×2 DataFrame\n Row │ name            instrumentConfig!name \n     │ String          String                \n─────┼───────────────────────────────────────\n   1 │ Test Run        Protocol 1 Config\n   2 │ Test James 102  test config #asdf\n   3 │ Test Import     Branching Example\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.tomany-Tuple{Any, Vararg{Any}}","page":"Home","title":"Mongolia.tomany","text":"tomany(parent, children...)\n\nConstruct a pipeline traversing a chain of to-many relations.\n\nExamples\n\njulia> tomany(:device, :devconfig, :config=>:trigger)\n\n[...]\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.toparent-Tuple","page":"Home","title":"Mongolia.toparent","text":"toparent(key...; skipmissing=false)\n\nJoin with a chain of parents specified by the keys. o\n\nExamples\n\nmfind(db.participant, toparent(:project))\nmfind(db.trigger. topparent(:configuration => :instrumentConfig))\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.unflatten-Tuple{Any}","page":"Home","title":"Mongolia.unflatten","text":"unflatten(row)\nunflatten(::Vector{row})\nunflatten(::AbstractDataFrame)\n\nConvert flattened mongo docs to its original shape\n\n\n\n\n\n","category":"method"}]
}
