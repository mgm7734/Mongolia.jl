var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Mongolia","category":"page"},{"location":"#[Mongolia](https://github.com/mgm7734/Mongolia.jl)","page":"Home","title":"Mongolia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for working with Mongodb data in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Mongolia provides a Tables implementation for [Mongoc.Cursor].","category":"page"},{"location":"#Mongo-data-Mongolian-Tables","page":"Home","title":"Mongo data => Mongolian Tables","text":"","category":"section"},{"location":"#Mongolian-query-syntax","page":"Home","title":"Mongolian query syntax","text":"","category":"section"},{"location":"#Mongolian-Tables-Mongo-data","page":"Home","title":"Mongolian Tables => Mongo data","text":"","category":"section"},{"location":"#SSH-Tunnel","page":"Home","title":"SSH Tunnel","text":"","category":"section"},{"location":"#Misc.-Tips","page":"Home","title":"Misc. Tips","text":"","category":"section"},{"location":"#Memoize-Expensive-Queries","page":"Home","title":"Memoize Expensive Queries","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Mongolia]","category":"page"},{"location":"#Mongolia.bson-Tuple{}","page":"Home","title":"Mongolia.bson","text":"bson(pair...) => Mongoc.BSON\nbson(AbstractVector{pair}) => Vector{Mongoc.BSON}\n\nConstruct a BSON object using keyword arguments or pairs to reduce quote clutter.\n\nExamples\n\njulia> bson(\"metadata.pt\" => \"xyz\", :project => +:in => [\"proj1\", \"proj2\"])\nMongoc.BSON with 2 entries:\n  \"metadata.pt\" => \"xyz\"\n  \"project\"     => Dict{Any, Any}(\"\\$in\"=>Any[\"proj1\", \"proj2\"])\n\njulia> bson([\n         +:match => :type=>\"SUBMIT\", \n         +:group => (:_id=>+:pt, :N=>+:sum=>1)\n       ])\nMongoc.BSON with 2 entries:\n  \"0\" => Dict{Any, Any}(\"\\$match\"=>Dict{Any, Any}(\"type\"=>\"SUBMIT\"))\n  \"1\" => Dict{Any, Any}(\"\\$group\"=>Dict{Any, Any}(\"_id\"=>\"\\$pt\", \"N\"=>Dict{Any,â€¦\njulia> bson(a=1, b=2)\nMongoc.BSON with 2 entries:\n  \"a\" => 1\n  \"b\" => 2\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.tomany-Tuple{Any, Vararg{Any}}","page":"Home","title":"Mongolia.tomany","text":"tomany(parent, children...)\n\nPipeline helper TODO\n\nExamples\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.toparent-Tuple","page":"Home","title":"Mongolia.toparent","text":"toparent(key...; skipmissing=false)\n\nJoin with a chain of parents specified by the keys. o\n\nExamples\n\npilrfind(db.participant, toparent(:project))\npilrfind(db.trigger. topparent(:configuration => :instrumentConfig))\n\n\n\n\n\n","category":"method"},{"location":"#Mongolia.unflatten-Tuple{Any}","page":"Home","title":"Mongolia.unflatten","text":"Convert flattened mongo doc to original shape\n\n\n\n\n\n","category":"method"}]
}
